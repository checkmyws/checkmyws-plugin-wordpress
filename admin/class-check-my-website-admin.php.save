<?php
/**
 * The admin-specific functionality of the plugin.
 *
 * Defines the plugin name, version, and hooks for
 * enqueue styles, scripts, widgets and pages.
 *
 * @link       https://checkmy.ws
 * @since      1.0.0
 *
 * @package    check-my-website
 * @subpackage check-my-website/admin
 * @author     Check my Website by NOVATEEK <contact@checkmy.ws>
 */
class Check_my_Website_Admin {

	/**
	 * The ID of this plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string    $plugin_name    The ID of this plugin.
	 */
	private $plugin_name;

	/**
	 * The version of this plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string    $version    The current version of this plugin.
	 */
	private $version;

	/**
	 * Initialize the class and set its properties.
	 *
	 * @since    1.0.0
	 * @var      string    $plugin_name       The name of this plugin.
	 * @var      string    $version    The version of this plugin.
	 */
	public function __construct( $plugin_name, $version ) {

		$this->plugin_name = $plugin_name;
		$this->version = $version;

	}

	/**
	 * Register the stylesheets for the admin-side.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_styles() {

		wp_enqueue_style( $this->plugin_name, plugin_dir_url( __FILE__ ) . 'css/check-my-website-admin.css', array(), $this->version, 'all' );

	}

	/**
	 * Register the javascripts for the admin-side.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_scripts() {

		wp_enqueue_script( $this->plugin_name . '-admin', plugin_dir_url( __FILE__ ) . 'js/check-my-website-admin.js', array( 'jquery' ), $this->version, false );
		wp_enqueue_script( $this->plugin_name . '-flot', plugin_dir_url( __FILE__ ) . 'js/flot/jquery.flot.js', array( 'jquery' ), $this->version, false );
		wp_enqueue_script( $this->plugin_name . '-flot-time', plugin_dir_url( __FILE__ ) . 'js/flot/jquery.flot.time.js', array( 'jquery' ), $this->version, false );
		wp_enqueue_script( $this->plugin_name . '-flot-threshold', plugin_dir_url( __FILE__ ) . 'js/flot/jquery.flot.threshold.js', array( 'jquery' ), $this->version, false );
		wp_enqueue_script( $this->plugin_name . '-flot-tooltip', plugin_dir_url( __FILE__ ) . 'js/flot/jquery.flot.tooltip.js', array( 'jquery' ), $this->version, false );

	}

	/**
         * Register the dashboard widgets for the admin-side.
         *
         * @since    1.0.0
         */
        public function enqueue_widgets() {

                wp_add_dashboard_widget( $this->plugin_name, 'Check my Website', array( $this, 'dashboard_widget' ) );

        }

	/**
         * Register the pages for the admin-side.
         *
         * @since    1.0.0
         */
        public function enqueue_pages() {

		// Register the settings page of the plugin.
                add_options_page( 'Check my Website', 'Check my Website', 'manage_options', 'check-my-website-setting', array( $this, 'setting' ) );

		// Register the dashboard page of the plugin.
		add_dashboard_page( 'Check my Website', 'Check my Website', 'manage_options', 'check-my-website', array( $this, 'dashboard' ) );

        }

	/**
         * Register the settings sections for the settings page of the plugin.
         *
         * @since    1.0.0
         */
        private function enqueue_sections() {

		add_settings_section('general_settings', 'General', array( $this, 'define_general_section'), 'check-my-website-setting');
		add_settings_section('supplements_settings', 'Supplements', array( $this, 'define_supplements_section'), 'check-my-website-setting');

        }

	/**
         * Register the settings fields for the settings sections.
         *
         * @since    1.0.0
         */
        private function enqueue_fields() {

		add_settings_field('key', 'API key', array( $this, 'define_key'), 'check-my-website-setting', 'general_settings');
		add_settings_field('interval', 'Request interval', array( $this, 'define_interval'), 'check-my-website-setting', 'general_settings');
		add_settings_field('style', 'Style', array( $this, 'define_style'), 'check-my-website-setting', 'general_settings');
		add_settings_field('unit', 'Time unit', array( $this, 'define_unit'), 'check-my-website-setting', 'general_settings');
		add_settings_field('shortcode', 'Shortcode', array( $this, 'define_shortcode'), 'check-my-website-setting', 'supplements_settings');
		add_settings_field('widget', 'Widget', array( $this, 'define_widget'), 'check-my-website-setting', 'supplements_settings');

        }

	/**
         * Register the settings and sanitizations for the settings page of the plugin.
         *
         * @since    1.0.0
         */
        public function enqueue_settings() {

		// Load settings sections and fields to register.
		$this->enqueue_sections();
		$this->enqueue_fields();

		// Register adn save settings.
		register_setting( 'check_my_website_settings', 'check_my_website_settings', array( $this, 'validate') );

        }

	/**
         * Sanitize the saved settings values of the settings page of the plugin.
         *
         * @since    1.0.0
	 * @var      array    $inputs       The saved settings values of the  plugin.
         */
        public function validate( $inputs ) {

		//$options = get_option(' checkmyws_options ');
                //$options['checkmyws-settings-url-id'] = ( $inputs['checkmyws-settings-url-id'] );

                return $inputs;

        }

	/**
         * Display the general section in the settings page of the plugin.
         *
         * @since    1.0.0
         */
        public function define_general_section() {

		echo '<p>' . __( 'Settings to get data from Check my Website API and display it.', 'check-my-website' ) . '</p>';

        }

	/**
         * Display the supplements section in the settings page of the plugin.
         *
         * @since    1.0.0
         */
        public function define_supplements_section() {

                echo '<p>' . __( 'Settings to disable/enable Check my Website shortcode and widget.', 'check-my-website' ) . '</p>';

        }

	/**
         * Display the key field in the settings page of the plugin.
         *
         * @since    1.0.0
         */
        public function define_key() {

		$options = get_option( 'check_my_website_settings' );

                echo '<input type="text" name="check_my_website_settings[key]" value="' . $options['key'] . '" />';

        }

	/**
         * Display the interval field in the settings page of the plugin.
         *
         * @since    1.0.0
         */
        public function define_interval() {

		$options = get_option( 'check_my_website_settings' );

		$values = array( '1', '5', '10' );

		echo '<select name="check_my_website_settings[interval]">';
			foreach ( $values as $value ) {
				echo '<option value="' .  $value . '" ' . selected( $options['interval'], $value ) . '>' . $value . ' minute(s)</option>';
			}
		echo '</select>';

        }

	/**
         * Display the style field in the settings page of the plugin.
         *
         * @since    1.0.0
         */
        public function define_style() {

		$options = get_option( 'check_my_website_settings' );

		$styles = array( 'check-my-website-classic' => 'Classic', 'check-my-website-light' => 'Light', 'check-my-website-dark' => 'Dark' );

                echo '<select name="check_my_website_settings[style]">';
                        foreach ( $styles as $key => $value ) {
                                echo '<option value="' .  $key . '" ' . selected( $options['style'], $key ) . '>' . $value . '</option>';
                        }
                echo '</select>';

        }

	/**
         * Display the unit field in the settings page of the plugin.
         *
         * @since    1.0.0
         */
        public function define_unit() {

		$options = get_option( 'check_my_website_settings' );

                $units = array( 'ms' => 'Millisecond', 's' => 'Second' );

                echo '<select name="check_my_website_settings[unit]">';
                        foreach ( $units as $key => $value ) {
                                echo '<option value="' .  $key . '" ' . selected( $options['unit'], $key ) . '>' . $value . '</option>';
                        }
                echo '</select>';

        }

	/**
         * Display the shortcode field in the settings page of the plugin.
         *
         * @since    1.0.0
         */
        public function define_shortcode() {

                $options = get_option( 'check_my_website_settings' );

		$values = array( 'Disable', 'Enable' );

		foreach ( $values as $value ) {
			echo '<input type="radio" name="check_my_website_settings[shortcode]" value="' . $value  . '" ' . checked( $options['shortcode'], $value, false ) . '/>' . $value . ' ';
		}

        }

	/**
         * Display the widget field in the settings page of the plugin.
         *
         * @since    1.0.0
         */
        public function define_widget() {

		$options = get_option( 'check_my_website_settings' );

                $values = array( 'None', 'Public only', 'Admin only', 'Public and Admin' );

                echo '<select name="check_my_website_settings[widget]">';
                        foreach ( $values as $value ) {
                                echo '<option value="' .  $value . '" ' . selected( $options['widget'], $value ) . '>' . $value . '</option>';
                        }
                echo '</select>';

        }

	/**
         * Display the settings page of the plugin.
         *
         * @since    1.0.0
         */
        public function setting() {

		global $pagenow;

                $current = 'settings';

                $tabs = array( 'settings' => 'Settings', 'dashboard' => 'Dashboard' );

                if ( isset ( $_GET['tab'] ) ) {
                        $current = $_GET['tab'];
                };

		include( plugin_dir_path( __FILE__ ) . 'partials/check-my-website-admin-header.php' );
                include( plugin_dir_path( __FILE__ ) . 'partials/check-my-website-admin-settings.php' );
                include( plugin_dir_path( __FILE__ ) . 'partials/check-my-website-admin-footer.php' );

        }

	/**
         * Display the dashboard page of the plugin.
         *
         * @since    1.0.0
         */
        public function dashboard() {

		global $pagenow;

		$current = 'overview';

		$tabs = array( 'overview' => 'Overview', 'logs' => 'Logs', 'metrics' => 'Metrics', 'settings' => 'Settings' );

		if ( isset ( $_GET['tab'] ) ) {
			$current = $_GET['tab']; 
		};

		// Load default parameters.
		$options = get_option( 'check_my_website_settings' );
                $default_api_key = $options['key'];
		$default_style = $options['style'];
		$default_unit = $options['unit'];

		// Load api data.
		if ( isset( $default_api_key ) ) { 
                	$api = new Check_my_Website_Api( $default_api_key );
			$data = cmws_data( $api->get_api_data() );
		} else {
			$data = NULL;
		}	
	
		// Display page.	
		include( plugin_dir_path( __FILE__ ) . 'partials/check-my-website-admin-header.php' );
                include( plugin_dir_path( __FILE__ ) . 'partials/check-my-website-admin-dashboard.php' );
		include( plugin_dir_path( __FILE__ ) . 'partials/check-my-website-admin-footer.php' );

        }

	/**
         * Display the dashboard widget of the plugin.
         *
         * @since    1.0.0
         */
        public function dashboard_widget() {

		// Load default parameters.
                $options = get_option( 'check_my_website_settings' );
                $default_api_key = $options['key'];
                $default_style = $options['style'];
                $default_unit = $options['unit'];

                // Load api data.
                if ( isset( $default_api_key ) ) {
                        $api = new Check_my_Website_Api( $default_api_key );
                        $data = cmws_data( $api->get_api_data() );
                } else {
                        $data = NULL;
                }

		// Display dashboard widget.
                include( plugin_dir_path( __FILE__ ) . 'partials/check-my-website-admin-dashwidget.php' );

        }

}

?>
